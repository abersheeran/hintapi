name: CI

on:
  push:
    branches:
      - master
    tags:
      - "*"
    paths:
      - ".github/workflows/ci.yml"
      - "**.py"
      - "!hintapi/__version__.py"
      - pdm.lock
  pull_request:
    branches:
      - master
    paths:
      - ".github/workflows/ci.yml"
      - "**.py"
      - "!hintapi/__version__.py"
      - pdm.lock

jobs:
  tests:
    name: "Python ${{ matrix.python-version }} ${{ matrix.os }}"
    runs-on: "${{ matrix.os }}"
    strategy:
      matrix:
        python-version: [3.7, 3.8, 3.9, "3.10"]
        os: [windows-latest, ubuntu-latest, macos-latest]
    env:
      OS: ${{ matrix.os }}
      PYTHON: ${{ matrix.python-version }}
    steps:
      - uses: actions/checkout@v1
      - uses: pdm-project/setup-pdm@v2.5
        name: Setup Python and PDM
        with:
          python-version: ${{ matrix.python-version }}
          architecture: x64
          version: 1.9.0
          enable-pep582: true # Enable PEP 582 package loading globally
      - name: Install dependencies
        run: pdm install -v -dG dev -dG tests --no-self
      - name: Static type and format checking
        run: python script/check.py
      - name: Tests
        run: pdm run pytest tests --cov=hintapi --cov-report=xml -o log_cli=true -o log_cli_level=DEBUG
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v1
        with:
          files: ./coverage.xml
          directory: ./coverage/reports/
          verbose: true
          token: ${{ secrets.CODECOV_TOKEN }}

  publish:
    needs: tests
    if: startsWith(github.ref, 'refs/tags/')

    runs-on: "${{ matrix.os }}"
    strategy:
      matrix:
        python-version: [3.7]
        os: [ubuntu-latest]

    steps:
      - uses: actions/checkout@v1

      - uses: pdm-project/setup-pdm@v2.5
        name: Setup Python and PDM
        with:
          python-version: ${{ matrix.python-version }}
          architecture: x64
          version: 1.9.0
          enable-pep582: true # Enable PEP 582 package loading globally

      - name: Install dependencies
        run: |
          python -m pip install --upgrade twine

      - name: Build
        run: |
          pdm build

      - name: Publish
        run: |
          twine upload --username __token__ --password ${{ secrets.PYPI_API_TOKEN }} --verbose --skip-existing dist/*
